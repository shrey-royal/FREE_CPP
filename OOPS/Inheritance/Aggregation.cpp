#include<iostream>
#include<iomanip>
using namespace std;

class Customer {
private:
    string name;
    int accountNumber;
    double balance;
public:
    // Customer() : name(""), accountNumber(0), balance(0.0) {}

    Customer(string n, int accNo, double bal) : name(n), accountNumber(accNo), balance(bal) {}

    void display() {
        cout << "Name: " << name << ", Account Number: " << accountNumber << ", Balance: " << fixed << setprecision(2) << balance << endl;
    }

    string getName() { return name; }
};

class Bank {
private:
    string bankName;
    Customer** customers; //Aggregation - Array of customer pointer
    int capacity;
    int size;
public:
    Bank(string n, int cap) : bankName(n), capacity(cap), size(0) {
        customers = new Customer*[capacity];
    }

    ~Bank() {
        for (int i = 0; i < size; i++) {
            delete customers[i];
        }
        delete[] customers;
    }

    void addCustomer(Customer* customer) {
        if(size == capacity) {
            cout << "Sorry " << customer->getName() << ", We cannot created more accounts." << endl;
            return;
        }
        customers[size++] = customer;
        cout << "Account Created for " << customer->getName() << "!" << endl;
    }

    void display() {
        cout << "Customer of " << bankName << ":\n";
        for (int i = 0; i < size; i++) {
            customers[i]->Customer::display();
        }
    }
};

int main() {
    Bank pnb("Punjab National Bank", 5);

    pnb.addCustomer(new Customer("Vishwa Soni", 55388, 0.5));
    pnb.addCustomer(new Customer("Vishva Darji", 1032, 45000));
    pnb.addCustomer(new Customer("Mohak Patel", 420, 10));
    pnb.addCustomer(new Customer("Zafar Sir", 5563, 1000000));
    pnb.addCustomer(new Customer("Shrey", 5468, 5000000));

    pnb.display();

    return 0;
}

/*
Tasks:

1. School Management System:
   Develop a school management system where each school has multiple classes, and each class has multiple students. Implement classes for School, Class, and Student. The School class should aggregate Class objects, and each Class object should aggregate Student objects. Provide functionalities to add new classes and students, display all students in a particular class, and calculate average scores of students in a class.

2. Inventory Management System:
   Create an inventory management system for a retail store. Each store has multiple departments, and each department has multiple products. Implement classes for Store, Department, and Product. The Store class should aggregate Department objects, and each Department object should aggregate Product objects. Implement functionalities to add new products, display products in a particular department, and calculate total revenue generated by a store.

3. Library Catalog System:
   Design a library catalog system where each library has multiple sections, and each section contains multiple books. Create classes for Library, Section, and Book. The Library class should aggregate Section objects, and each Section object should aggregate Book objects. Implement functionalities to add new books, search for books by title or author, and display all books available in a particular section.

4. Car Rental Management System:
   Build a car rental management system for a rental agency. Each agency has multiple branches, and each branch manages multiple cars. Develop classes for Agency, Branch, and Car. The Agency class should aggregate Branch objects, and each Branch object should aggregate Car objects. Provide functionalities to add new cars, rent a car from a specific branch, and calculate total revenue earned by an agency.

5. Music Streaming Service:
   Create a music streaming service where each platform hosts multiple playlists, and each playlist contains multiple songs. Implement classes for Platform, Playlist, and Song. The Platform class should aggregate Playlist objects, and each Playlist object should aggregate Song objects. Implement functionalities to add new songs to playlists, search for songs by artist or genre, and display all playlists available on a platform.
*/